name: Deploy to Cluster

on:
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Cluster name to deploy to'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Install OpenVPN client
        run: sudo apt-get update && sudo apt-get install -y openvpn

      - name: Prepare VPN config & certs
        env:
          CLUSTER: ${{ github.event.inputs.cluster }}
        run: |
          mkdir -p vpn
          case "$CLUSTER" in
            homelab)
              echo "${{ secrets.OPENVPN_CONF_HOMELAB }}" > vpn/client.ovpn
              echo "${{ secrets.OPENVPN_CA_HOMELAB }}" > vpn/ca.crt
              echo "${{ secrets.OPENVPN_CERT_HOMELAB }}" > vpn/client.crt
              echo "${{ secrets.OPENVPN_KEY_HOMELAB }}" > vpn/client.key
              echo "${{ secrets.OPENVPN_TLS_HOMELAB }}" > vpn/tls.key
              echo "${{ secrets.OPENVPN_CREDENTIALS_HOMELAB }}" > vpn/credentials.txt
              ;;
            *)
              echo "Unknown cluster $CLUSTER"
              exit 1
              ;;
          esac
          cat vpn/client.ovpn

      - name: Display VPN config
        run: |
          echo "VPN configuration for cluster $CLUSTER:"
          cat vpn/client.ovpn

      - name: Connect VPN
        run: |
          sudo openvpn --config ./vpn/client.ovpn
          sleep 15
          echo "VPN connected successfully."

      - name: Setup kubeconfig
        run: |
          mkdir -p $HOME/.kube
          case "$CLUSTER" in
            homelab)
              echo "${{ secrets.KUBECONFIG_HOMELAB }}" > $HOME/.kube/config
              ;;
            *)
              echo "Unknown cluster $CLUSTER"
              exit 1
              ;;
          esac
          chmod 600 $HOME/.kube/config

      - name: Apply changed apps manifests
        run: |
          CLUSTER=${{ github.event.inputs.cluster }}
          git fetch origin ${{ github.ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.base_ref }} ${{ github.sha }} -- clusters/${CLUSTER}/)
          echo "Applying changed files to cluster $CLUSTER:"
          echo "$CHANGED_FILES"
          for FILE in $CHANGED_FILES; do
            kubectl apply -f "$FILE"
          done